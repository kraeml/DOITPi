#!/usr/bin/env bash
# <Script Name>
# <Description what this module does>
# Written by <Author>
# GPL V3
########


# Source error handling, leave this in place
set +x
set -e

source /common.sh
install_cleanup_trap

if [ -d /filesystem/home/pi ]
then
    unpack /filesystem/home/pi /home/"${BASE_USER}" "${BASE_USER}"
fi
if [ -d /filesystem/home/root ]
then
    unpack /filesystem/home/root /root root
fi
if [ -d /filesystem/boot ]
then
    unpack /filesystem/boot /boot
fi

echo "echo "From here the PYTHONGPIO-Module starts""
echo "$PYTHONGPIO_VAR auf ${BASE_DISTRO}/${BASE_ARCH}"
echo "$PYTHONGPIO_PKGS"

apt_update_skip
check_install_pkgs ${PYTHONGPIO_PKGS}

echo 'Activate i2c'
if [ ${BASE_DISTRO} != "ubuntu" ]
then
  sed -i -E 's;^#(dtparam=i2c_arm=on);\1;g' /boot/config.txt
  sed -i "s/dtparam=i2c_arm=on/dtparam=i2c_arm=on\ndtparam=i2c_vc=on/g" /boot/config.txt
fi
usermod -aG bluetooth ${BASE_USER}

echo 'Activate spi'
if [ ${BASE_DISTRO} != "ubuntu" ]
then
  for i in "do_i2c" "do_spi"
  do
    raspi-config nonint $i 0
  done
fi

pushd  /home/"${BASE_USER}"/workspace
  gitclone PYTHONGPIO_GPIOBLOCKLY_REPO
popd

su - -c "cd /home/${BASE_USER}/bin && virtualenv -p python3 jupyter-venv" "${BASE_USER}"
su - -c "source /home/${BASE_USER}/bin/jupyter-venv/bin/activate && pip install -U pip wheel && pip install -U jupyterlab notebook qtconsole ipywidgets" "${BASE_USER}"

echo 'Unpack root at the end, so files are modified before'
if [ -d /filesystem/root ]
then
  unpack /filesystem/root /
fi

systemctl disable jupyter.service
