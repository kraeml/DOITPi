#!/usr/bin/env bash
# -*- mode: shell-script; coding: utf-8; -*-
#
# doitpi-mybase-setup.sh
#
# **Description:**
# This script configures a base system inside a chroot environment from CustomPiOS.
# It installs essential packages, sets up Ansible and test environments,
# and performs system-wide configurations.
#
# **Author:** Michael Schaar
# **License:** GPLv3
#
# ---

########
# **Expected Environment Variables:**
#
#   BASE_USER               Username for which the script is executed.
#                           Example: "pi"
#
#   MYBASE_VAR              Target distribution and architecture.
#                           Format: "<arch>" (e.g., "arm64")
#
#   MYBASE_PKGS             List of packages to install (space-separated).
#                           Example: "vim git curl"
#
#   MYBASE_DOITPI_ANSIBLE_REPO
#                           URL of the Ansible repository.
#                           Example: "https://github.com/user/doitpi-ansible.git"
#
#   MYBASE_DOITPI_ANSIBLE_REPO_TAGS
#                           Tags for the Ansible playbook (comma-separated).
#                           Example: "mybase,hotspot"
#
#   MYBASE_DOITPI_TEST_REPO  URL of the test repository.
#                           Example: "https://github.com/user/doitpi-test.git"
#
# ---

########
# **Dependencies:**
# - CustomPiOS: This script is designed to run inside a CustomPiOS chroot.
#               (https://github.com/guysoft/CustomPiOS)
# - /common.sh: Contains shared functions like `unpack`, `gitclone`, and `install_cleanup_trap`.
# - apt-get: Package manager for installing packages.
# - git: Required for cloning repositories.
# - python3/pip: Required for the test environment (pytest).
# - direnv: Used for the test environment (optional).
#
########


# Source error handling, leave this in place
set +x
set -e

source /common.sh
install_cleanup_trap

if [ -d /filesystem/home/pi ]
then
    unpack /filesystem/home/pi /home/"${BASE_USER}" "${BASE_USER}"
fi
if [ -d /filesystem/home/root ]
then
    unpack /filesystem/home/root /root root
fi
if [ -d /filesystem/boot ]
then
    unpack /filesystem/boot /boot
fi

echo "From here the MYBASE-Module starts"
echo "$MYBASE_VAR auf ${BASE_DISTRO}/${BASE_ARCH}"
echo "$MYBASE_PKGS"

# apt_update_skip
apt-get update
check_install_pkgs ${MYBASE_PKGS}

if [ ${BASE_DISTRO} != "ubuntu" ]
then
    apt-get remove cryptsetup
fi

echo 'Install doitpi ansible and test environment'
BASE_USER_HOME=/home/${BASE_USER}
BASE_USER_WORKSPACE=${BASE_USER_HOME}/workspace
# Für ansible-playbook default locale vorgeben
export LC_ALL=C.UTF-8

cd ${BASE_USER_WORKSPACE}
  gitclone MYBASE_DOITPI_ANSIBLE_REPO
  chown --recursive "${BASE_USER}": ${BASE_USER_HOME}
  cd ./doitpi-ansible
  # HOME für pyenv Rolle setzen
  env HOME=${BASE_USER_HOME} ansible-playbook --extra-vars "ansible_user_id=${BASE_USER} ansible_user_dir=${BASE_USER_HOME}" --tags ${MYBASE_DOITPI_ANSIBLE_REPO_TAGS} --limit lokal main.yaml

chown --recursive ${BASE_USER}: ${BASE_USER_HOME}

if [ -d /filesystem/root ]
then
    echo "Unpack root filesystem"
    unpack /filesystem/root /
fi

cd ${BASE_USER_WORKSPACE}
  gitclone MYBASE_DOITPI_TEST_REPO
  chown --recursive "${BASE_USER}": ./doitpi-test
  cd ./doitpi-test
  su --command "direnv allow ." "${BASE_USER}"
  su --command "direnv exec ${BASE_USER_WORKSPACE}/doitpi-test pip install -r requirements.txt" "${BASE_USER}"
  su --command "direnv exec ${BASE_USER_WORKSPACE}/doitpi-test pytest ${BASE_USER_WORKSPACE}/doitpi-test/test_chroot.py" "${BASE_USER}"


chown --recursive ${BASE_USER}: ${BASE_USER_HOME}

echo 'Configure dhclient'
if [ -f /etc/dhcp/dhclient.conf ]
then
    echo 'Do not try too long to reach the DHCPD server (blocks booting)'
    sed -i "s/#timeout 60;/timeout 10;/g" /etc/dhcp/dhclient.conf
    # By default, the client retries to contact the DHCP server after five min.
    # Reduce this time to 20 sec.
    sed -i "s/#retry 60;/retry 20;/g" /etc/dhcp/dhclient.conf
fi

echo 'Setup gpu memory'
# ToDo Ubuntu nicht machen?
if [ -f /boot/config.txt ]
then
    echo "gpu_mem=16M" >> /boot/config.txt
fi
# Unpack root at the end, so files are modified before
if [ -d /filesystem/root ]
then
    unpack /filesystem/root /
fi
# systemctl enable codeserver.service
systemctl enable doitpi_firstboot.service
