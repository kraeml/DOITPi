name: CI mit Artifakten und Matrix-Builds

on:
  push:
    branches:
      - develop
      - 'feature/*'
      - 'release/*'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'  # Nur semantische Versionen (z. B. v1.0.0)
  pull_request:
    branches:
      - develop
      - master
  workflow_dispatch:

env:
  IMAGE_PREFIX: devops

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.release_name.outputs.release }}
      prerelease: ${{ steps.release_name.outputs.prerelease }}
    strategy:
      matrix:
        arch: [arm64, armhf]
        include:
          - arch: arm64
            workspace: workspace-raspios_lite_arm64
            image_suffix: arm64
          - arch: armhf
            workspace: workspace-raspios
            image_suffix: armhf

    steps:
      # Caching für apt-Pakete
      - name: Cache apt packages
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: coreutils p7zip-full qemu-user-static pv time python3-git python3-yaml jq binfmt-support
          version: 1.0

      # System vorbereiten und aufräumen
      - name: Install Dependencies and Cleanup
        run: |
          sudo apt-get update
          sudo apt-get install --yes coreutils p7zip-full qemu-user-static pv time python3-git python3-yaml jq binfmt-support
          sudo systemctl restart systemd-binfmt
          sudo rm -rf /usr/local/lib/android /usr/local/node_modules /opt/hostedtoolcache/CodeQL || true
          sudo rm -rf /opt/hostedtoolcache/go /opt/hostedtoolcache/Python /usr/local/.ghcup /usr/local/share/chromium || true
          sudo docker system prune --force
          sudo docker volume prune --force
          df -h

      # Repositories auschecken
      - name: Checkout CustomPiOS
        uses: actions/checkout@v4
        with:
          repository: 'guysoft/CustomPiOS'
          path: CustomPiOS
          fetch-depth: 0

      # Spezifischen Commit auschecken
      - name: Checkout specific commit
        run: git checkout 0f05cda
        working-directory: CustomPiOS  # Führt den Befehl im CustomPiOS-Verzeichnis aus

      - name: Checkout Project Repository
        uses: actions/checkout@v4
        with:
          path: repository
          submodules: true

      # CustomPiOS-Pfade anpassen
      - name: Update CustomPiOS Paths
        run: |
          cd repository/src
          ../../CustomPiOS/src/update-custompios-paths

      # Version extrahieren (mit Fehlerbehandlung)
      - name: Determine Version
        id: version
        run: |
          version=$(awk -F '=' '/DIST_VERSION/ {gsub(/ /,"",$2); print $2}' repository/src/config)
          if [ -z "$version" ]; then
            echo "::error::DIST_VERSION not found in config!"
            exit 1
          fi
          echo "version=$version" >> $GITHUB_OUTPUT

      # Release-Name generieren (robuster Check für Tags)
      - name: Generate Release Name
        id: release_name
        run: |
          ref='refs/tags/v'
          clean_ref_name=$(echo "${{ github.ref_name }}" | tr '/' '-')
          if [[ ${{ github.ref_type }} == "tag" ]]; then
            echo "release=${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
          else
            echo "release=${{ steps.version.outputs.version }}-${clean_ref_name}-$(date +%y.%m.%d-%H_%M_%S)" >> $GITHUB_OUTPUT
            echo "prerelease=true" >> $GITHUB_OUTPUT
          fi
          cat $GITHUB_OUTPUT

      # Build für die jeweilige Architektur (parallelisiert mit -j)
      - name: Build ${{ matrix.arch }} Image
        run: |
          sudo modprobe loop
          cd repository/src
          echo "Building ${{ matrix.arch }} with $(nproc) cores..."
          time sudo make -j$(nproc) ${{ matrix.arch }}
          df -h

      # Image erstellen und validieren (Handhabung mehrerer Dateien)
      - name: Create ${{ matrix.arch }} Image
        id: get_image_info
        run: |
          source repository/src/config
          IMAGE=${{ env.IMAGE_PREFIX }}-${{ steps.release_name.outputs.release }}_${{ matrix.image_suffix }}
          img_files=(repository/src/${{ matrix.workspace }}/*.img.xz)
          if [ ${#img_files[@]} -eq 0 ]; then
            echo "::error::No ${{ matrix.arch }} image found!"
            exit 1
          elif [ ${#img_files[@]} -gt 1 ]; then
            echo "::warning::Multiple images found, using first: ${img_files[0]}"
          fi
          sudo mv "${img_files[0]}" "${IMAGE}.img.xz"
          echo "image=${IMAGE}.img.xz" >> $GITHUB_OUTPUT
          df -h

      # Image als Artifact hochladen
      - name: Upload ${{ matrix.arch }} Image
        uses: actions/upload-artifact@v4
        with:
          path: ${{ steps.get_image_info.outputs.image }}
          name: ${{ steps.get_image_info.outputs.image }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

      # Cleanup (aggressiv)
      - name: Cleanup
        if: always()
        run: |
          sudo docker system prune --force --all
          sudo rm -rf /tmp/*
          df -h

  # Release erstellen (nur bei Tags)
  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: ${{ needs.build.outputs.prerelease == 'true' }}
          name: Release ${{ needs.build.outputs.release }}
          body_path: repository/CHANGELOG.md
          files: |
            artifacts/**/*.img.xz  # Rekursiv alle .img.xz-Dateien
        env:
          GITHUB_TOKEN: ${{ github.token }}
