# This is a basic workflow to help you get started with Actions

name: CI mit Artifakte

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events
  push:
    branches: 
      - develop
      - master
  pull_request:
    branches: [ "master" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
    - name: Ausgabe von github.ref
        run: echo "Der Wert von github.ref ist ${{ github.ref }}"

    - name: Install Dependencies
      run: |
        sudo apt update
        sudo apt install coreutils p7zip-full qemu-user-static

    - name: Checkout CustomPiOS
      uses: actions/checkout@v3
      with:
        repository: 'guysoft/CustomPiOS'
        path: CustomPiOS

    - name: Checkout Project Repository
      uses: actions/checkout@v3
      with:
        path: repository
        submodules: true

    - name: Download Raspbian Image
      run: |
        cd repository/src/image
        wget --continue --quiet  --trust-server-names 'https://downloads.raspberrypi.org/raspios_lite_armhf_latest'
        cd ../image-raspios_lite_arm64
        wget --continue --quiet  --trust-server-names 'https://downloads.raspberrypi.org/raspios_lite_arm64_latest'
        cd ../image-ubuntu_arm64
        wget --continue --quiet --trust-server-names 'https://cdimage.ubuntu.com/releases/22.04/release/ubuntu-22.04.2-preinstalled-server-arm64+raspi.img.xz'

    - name: Update CustomPiOS Paths
      run: |
        cd repository/src
        ../../CustomPiOS/src/update-custompios-paths
    
    - name: Build Image
      run: |
        sudo modprobe loop
        cd repository/src
        make build_all

    - name: Version
      run: echo "version=$(grep DIST_VERSION repository/src/config | cut -d '=' -f 2)" >> $GITHUB_OUTPUT
      id: version

    - name: Get armhf info
      id: get_armhf_info
      run: |
        source repository/src/config
        IMAGE=devops-${{ steps.version.outputs.version }}_armhf

        cp repository/src/workspace-raspios/*.img ${IMAGE}.img
        xz ${IMAGE}.img
        echo "image=${IMAGE}.img.xz" >> $GITHUB_OUTPUT

    - name: Upload armhf Image Artifakt
      uses: actions/upload-artifact@v2
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        path: ${{ steps.get_armhf_info.outputs.image }}
        name: ${{ steps.get_armhf_info.outputs.image }}

    - name: Get arm64 info
      id: get_arm64_info
      run: |
        source repository/src/config
        IMAGE=devops-${{ steps.version.outputs.version }}_arm64

        cp repository/src/workspace-raspios_lite_arm64/*.img ${IMAGE}.img
        xz ${IMAGE}.img
        echo "image=${IMAGE}.img.xz" >> $GITHUB_OUTPUT

    - name: Upload arm64 Image Artifakt
      uses: actions/upload-artifact@v2
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        path: ${{ steps.get_arm64_info.outputs.image }}
        name: ${{ steps.get_arm64_info.outputs.image }}

    #- name: Copy arm64 ubuntu output
    #  id: copy_ubuntu_arm64
    #  run: |
    #    source repository/src/config
    #    IMAGE=devops-${{ steps.version.outputs.version }}_ubuntu_arm64

    #    cp repository/src/workspace-ubuntu_arm64/*.img ${IMAGE}.img
    #    xz ${IMAGE}.img
    #    echo "image=${IMAGE}.img.xz" >> $GITHUB_OUTPUT

    #- name: Upload arm64 ubuntu Image Artifakt
    #  uses: actions/upload-release-asset@v1
    #  env:
    #    GITHUB_TOKEN: ${{ github.token }}
    #  with:
    #    upload_url: ${{ steps.create_release.outputs.upload_url }}
    #    asset_path: ${{ steps.copy_ubuntu_arm64.outputs.image }}
    #    asset_name: ${{ steps.copy_ubuntu_arm64.outputs.image }}
    #    asset_content_type: application/xz
  
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Version
        run: echo "version=$(grep DIST_VERSION repository/src/config | cut -d '=' -f 2)" >> $GITHUB_OUTPUT
        id: version

      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: Release ${{ steps.version.outputs.version }}
          tag_name: ${{ github.ref }}
          body_path: repository/CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ github.token }}
      
      - name: Get armhf info
        id: get_armhf_info
        run: |
          IMAGE=devops-${{ steps.version.outputs.version }}_armhf
          echo "image=${IMAGE}.img.xz" >> $GITHUB_OUTPUT
      
      - name: Download arm artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{ steps.get_armhf_info.outputs.image }}
          name: ${{ steps.get_armhf_info.outputs.image }}
      
      - name: Upload armhf Image
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.get_armhf_info.outputs.image }}
          asset_name: ${{ steps.get_armhf_info.outputs.image }}
          asset_content_type: application/xz

      - name: Get arm64 info
        id: get_arm64_info
        run: |
          IMAGE=devops-${{ steps.version.outputs.version }}_armhf
          echo "image=${IMAGE}.img.xz" >> $GITHUB_OUTPUT
      
      - name: Download arm64 artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{ steps.get_arm64_info.outputs.image }}
          name: ${{ steps.get_arm64_info.outputs.image }}
      
      - name: Upload arm64 Image
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.get_arm64_info.outputs.image }}
          asset_name: ${{ steps.get_arm64_info.outputs.image }}
          asset_content_type: application/xz
